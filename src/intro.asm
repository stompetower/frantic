	ORG	08100H

INITMUSDAT:	EQU 0000H ; start/initialize new music/song
REPLAYROUT:	EQU 0003H ; interrupt routine for playing music
ALLMUSICOFF:	EQU 0006H ; turn off music all at once
SETVOLUDEC:	EQU 0009H ; start fading out music volume
SETPSGEFF:	EQU 001BH ; start new PSG sound effect
SETFMPEFF:	EQU 001EH ; start new FM sound effect
EFFPSGBEG:	EQU 0024H ; interrupt routine for playing PSG sound effects
EFFFMPBEG:	EQU 0027H ; interrupt routine for playing FM sound effects
MUSADRES:	EQU 002DH ; prepare music data (relative offsets -> absolute RAM addresses)
	
START:
	JP	STARTDEMO

INSTMUSINT: 
	LD	HL,STANDINT
	LD	(00039H),HL
	LD	HL,INTMUSIC
	LD	(INTERCALL),HL
	RET

STACK:	DW	0

INITVDPS:
	LD	B,128
	CALL	WRTVDP9
	LD	IX,VDPREGS	;aantal VDP's instellen
WRITEVDPS:
	LD	C,(IX+0)	    ;Schrijft serie VDP's
	BIT	7,C	    ;Invoer :
	RET	NZ	    ;	  IX=startadr. van tabel
	LD	B,(IX+1)	    ;	  (IX+0)+2K = register
	CALL	WRTVDP	    ;	  (IX+1)+2K = data
	INC	IX
	INC	IX
	JR	WRITEVDPS

VDPREGS:
	DB	1 ,00000010B
	DB	0 ,00010110B
	DB	8 ,00101000B
	DB	15,2
	DB	7 ,0
	DB	23,0
	DB	2,31
	DB	5,239
	DB	11,1
	DB	6,31
	DB	19,0
	DB	18,0
	DB	25,4
	DB	26,0
	DB	27,0
	DB	12,0
	DB	13,0
	DB	255

CLRSCRCOMM: 
	DW	0            ;Van (X)
	DB	0,0          ;Van (Y)
	DW	0            ;Naar (X)
	DB	0,0          ;Naar (Y)
	DW	256          ;Aantal horizontaal
	DW	256          ;Aantal verticaal
	DB	000H         ;Kleur
	DB	0            ;Manier van copieren
	DB	11000000B    ;Commando/Logop

RAMBYTE:
	LD	HL,0F344H	;Geeft primaire en secundaire sloten
	LD	DE,0	;voor RAM op alle pages.
	LD	B,4	;Invoer: Niets
RAMBYTE2:	
	LD	A,(HL)	;Uitvoer: D=primair (outpoort 0a8h)
	RR	A	;         E=secundair (adres 0FFFFh)
	RR	D
	RR	A
	RR	D
	RR	A
	RR	E
	RR	A
	RR	E
	DJNZ	RAMBYTE2
	RET

RAMROMBYTE: 
	CALL	RAMBYTE	;Geeft primaire en secundaire sloten
	LD	A,(0FCC1H)	;voor RAM op page 2 en 3 en ROM op page
	PUSH	AF	;0 en 1.
	AND	3	;Invoer: Niets
	LD	B,A	;Uitvoer: D=primair (outpoort 0A8h)
	ADD	A,A	;         E=secundair (adres 0FFFFh)
	ADD	A,A
	OR	B
	LD	B,A
	LD	A,D
	AND	240
	OR	B
	LD	D,A
	POP	AF
	AND	12
	LD	B,A
	SRL	A
	SRL	A
	OR	B
	LD	B,A
	LD	A,E
	AND	240
	OR	B
	LD	E,A
	RET

IGETKEYS:
	LD	B,A
	DI
	IN	A,(0AAH)
	AND	0F0H
	ADD	A,B
	OUT	(0AAH),A
	EI
	IN	A,(0A9H)
	RET

GETKEYS:
	LD	B,A
	IN	A,(0AAH)
	AND	0F0H
	ADD	A,B
	OUT	(0AAH),A
	IN	A,(0A9H)
	RET

READINT:
	DI
	LD	A,1
	OUT	(099H),A
	LD	A,143
	OUT	(099H),A
	IN	A,(099H)
	LD	A,2
	OUT	(099H),A
	LD	A,143
	OUT	(099H),A
	IN	A,(099H)
	RET

READINT2:
	DI
	LD	A,2
	OUT	(099H),A
	LD	A,143
	OUT	(099H),A
	IN	A,(099H)
	LD	A,1
	OUT	(099H),A
	LD	A,143
	OUT	(099H),A
	IN	A,(099H)
	XOR	A
	OUT	(099H),A
	LD	A,143
	OUT	(099H),A
	IN	A,(099H)
	RET

SPRITEPAG0:
	LD	DE,0000FH
	JR	SPRITESPAG
SPRITEPAG1:
	LD	DE,0011FH
	JR	SPRITESPAG
SPRITEPAG2:
	LD	DE,0022FH
	JR	SPRITESPAG
SPRITEPAG3:
	LD	DE,0033FH

SPRITESPAG:
	LD	BC,0EF05H
	CALL	WRTVDP
	LD	C,6
	LD	B,E
	CALL	WRTVDP
	LD	C,11
	LD	B,D
	JP	WRTVDP

SETRDVRAM:
	LD	A,H	    ;Stelt het VRAM-adres in (voor lezen)
	RL	A	    ;Invoer : HL=adres
	RL	A	    ;	  c=1 voor bovenste 64kb
	RL	A
	AND	7
	OUT	(099H),A
	LD	A,142
	OUT	(099H),A
	LD	A,L
	OUT	(099H),A
	LD	A,H
	AND	03FH
	OUT	(099H),A
	RET

ISETRDVRAM:
	LD	A,H	    ;Stelt het VRAM-adres in (voor lezen)
	RL	A	    ;Invoer : HL=adres
	RL	A	    ;	  c=1 voor bovenste 64kb
	RL	A
	AND	7
	DI
	OUT	(099H),A
	LD	A,142
	EI
	OUT	(099H),A
	LD	A,L
	DI
	OUT	(099H),A
	LD	A,H
	AND	03FH
	EI
	OUT	(099H),A
	RET

SETWRVRAM:
	LD	A,H	    ;Stelt het VRAM-adres in (voor scrijven)
	RL	A                   ;Invoer : HL=adres
	RL	A                   ;         c=1 voor bovenste 64kb
	RL	A
	AND	7
	OUT	(099H),A
	LD	A,142
	OUT	(099H),A
	LD	A,L
	OUT	(099H),A
	LD	A,H
	AND	03FH
	OR	040H
	OUT	(099H),A
	RET

ISETWRVRAM:
	LD	A,H	    ;Stelt het VRAM-adres in (voor scrijven)
	RL	A	    ;Invoer : HL=adres
	RL	A	    ;	  c=1 voor bovenste 64kb
	RL	A
	AND	7
	DI
	OUT	(099H),A
	LD	A,142
	EI
	OUT	(099H),A
	LD	A,L
	DI
	OUT	(099H),A
	LD	A,H
	AND	03FH
	OR	040H
	EI
	OUT	(099H),A
	RET

WRVRAM:
	PUSH	AF	    ;Schijft 1 byte data naar willekeurig
	CALL	SETWRVRAM	    ;VRAM-adres
	POP	AF	    ;Invoer :HL=adres, c=1 voor bovenste 64kb
	OUT	(098H),A	    ;	 A=data
	RET

RDVRAM:
	PUSH	AF	    ;Leest 1 byte data naar willekeurig
	CALL	SETRDVRAM	    ;VRAM-adres
	POP	AF	    ;Invoer :HL=adres, c=1 voor bovenste 64kb
	IN	A,(098H)	    ;Uitvoer:A=data
	RET

IWRVRAM:
	PUSH	AF	    ;Schijft 1 byte data naar willekeurig
	CALL	ISETWRVRAM	    ;VRAM-adres
	POP	AF	    ;Invoer :HL=adres, c=1 voor bovenste 64kb
	OUT	(098H),A	    ;	 A=data
	RET

IRDVRAM:
	PUSH	AF	    ;Leest 1 byte data naar willekeurig
	CALL	ISETRDVRAM	    ;VRAM-adres
	POP	AF	    ;Invoer :HL=adres, c=1 voor bovenste 64kb
	IN	A,(098H)	    ;Uitvoer:A=data
	RET

VDPCOMM:
	LD	A,32	    ;Stuurt 15-bytes data naar de
	OUT	(099H),A	    ;command-registers van de VDP.
	LD	A,145	    ;Invoer : HL=startadres van tabel data.
	OUT	(099H),A
VDPCOMMB:
	IN	A,(099H)
	BIT	0,A
	JR	NZ,VDPCOMMB
	LD	BC,00F9BH
	OTIR
	RET

IVDPCOMM:
	LD	A,32	    ;Stuurt 15-bytes data naar de
	DI
	OUT	(099H),A	    ;command-registers van de VDP.
	LD	A,145	    ;Invoer : HL=startadres van tabel data.
	EI
	OUT	(099H),A
IVDPCOMMB:
	IN	A,(099H)
	BIT	0,A
	JR	NZ,IVDPCOMMB
	LD	BC,00F9BH
	OTIR
	RET

VDPCOMM2:
	LD	A,32	    ;Stuurt 15-bytes data naar de
	OUT	(099H),A	    ;command-registers van de VDP.
	LD	A,145               ;Invoer : HL=startadres van tabel data.
	OUT	(099H),A
	CALL	CHECKVDP2
	LD	BC,00F9BH
	OTIR
	RET

CHECKVDP:
	IN	A,(099H)
	AND	1
	JR	NZ,CHECKVDP
	RET

CHECKVDP2:
	LD	A,2	    ;Kijkt of VDP klaar is, zonee, wacht
	OUT	(099H),A	    ;Invoer : -
	LD	A,143
	OUT	(099H),A
CHECKVDP2B:
	IN	A,(099H)
	AND	1
	JR	NZ,CHECKVDP2B
	XOR	A
	OUT	(099H),A
	LD	A,143
	OUT	(099H),A
	RET

WRTVDP:
	LD	A,B
	OUT	(099H),A
	LD	A,C
	OR	128
	OUT	(099H),A
	RET

IWRTVDP:
	LD	A,B
	DI
	OUT	(099H),A
	LD	A,C
	OR	128
	EI
	OUT	(099H),A
	RET

WRTVDP9:
	LD	A,(0FFE8H)
	AND	2
	OR	B
	OUT	(099H),A
	LD	A,137
	OUT	(099H),A
	RET

IWRTVDP9:
	LD	A,(0FFE8H)
	AND	2
	OR	B
	DI
	OUT	(099H),A
	LD	A,137
	EI
	OUT	(099H),A
	RET

	;Vult de spritekleurentabel (1 kleur per sprite!)
	;Invoer: HL=VRAM adres. c=1 voor bovenste 64 kB
	;	  DE=pointer naar 32-byte lange kleurentabel
	;opm: beinvloed geen interrupts
SETSPRCOL:
	CALL	SETWRVRAM
	LD	C,32
SETSPRCOLB:
	LD	B,16
	LD	A,(DE)
SETSPRCOLC:
	OUT	(098H),A
	NOP
	DJNZ	SETSPRCOLC
	INC	DE
	DEC	C
	JR	NZ,SETSPRCOLB
	RET

SPRTOVRAM:
	LD	HL,0F600H	;Zet spriteatribute-tabel in page 1
	OR	A
	CALL	SETWRVRAM
	LD	HL,SPRITEATR
	LD	BC,08098H
	OTIR
	RET

CLEARSPR:
	LD	HL,SPRITEATR
	LD	DE,4
	LD	B,32
CLEARSPRB:
	LD	(HL),219
	ADD	HL,DE
	DJNZ	CLEARSPRB
	RET

SPRITEATR:
	DB	219,0,0,0,219,0,0,0
	DB	219,0,0,0,219,0,0,0
	DB	219,0,0,0,219,0,0,0
	DB	219,0,0,0,219,0,0,0
	DB	219,0,0,0,219,0,0,0
	DB	219,0,0,0,219,0,0,0
	DB	219,0,0,0,219,0,0,0
	DB	219,0,0,0,219,0,0,0
	DB	219,0,0,0,219,0,0,0
	DB	219,0,0,0,219,0,0,0
	DB	219,0,0,0,219,0,0,0
	DB	219,0,0,0,219,0,0,0
	DB	219,0,0,0,219,0,0,0
	DB	219,0,0,0,219,0,0,0
	DB	219,0,0,0,219,0,0,0
	DB	219,0,0,0,219,0,0,0

	;Om kleuren via de interrupt te laten faden
LETFADE:
	LD	(STARTPAL),HL	;Invoer: HL=STARTPALLET
	LD	(EINDPAL),DE	;        DE=EINDPALLET
	CALL	FADEINIT	;        A=SNELHEID
	XOR	A
	LD	(REGELFADE),A
	RET

	;Op interrupt-niveau aanroepen en het faden wordt weer geregeld!
REGELFADE:
	RET
	LD	IX,0
	LD	IY,0
	CALL	FADE
	RET	NC
	LD	A,0C9H
	LD	(REGELFADE),A
	RET
STARTPAL:	EQU	REGELFADE+3
EINDPAL:	EQU	REGELFADE+7

FADEINIT:
	LD	(FADESPD1),A	;Invoer: HL=startpallet
	LD	(FADESPD2),A	;        A =snelheid
	LD	A,8
	LD	(FADEAANT),A	;8 keer faden
	XOR	A
	OUT	(099H),A
	LD	A,144
	OUT	(099H),A	;colorregister resetten
	LD	BC,0209AH
	OTIR		;start-pallet naar VDP
	LD	HL,FADEIRED
	LD	(FADEROUT),HL	;Deze routine als eerste aanroepen
	OR	A
	RET
FADEIRED:
	LD	HL,FADEIBLUE
	LD	(FADEROUT),HL
	LD	HL,FADETABEL
	LD	DE,2
	LD	B,16
FADEIREDC:
	LD	A,(IY+0)
	OR	15
	SUB	(IX+0)
FADEIREDB:
	SRA	A
	SRA	A
	SRA	A
	SRA	A
	LD	(HL),A
	INC	HL
	LD	A,(IX+0)
	SRL	A
	AND	00111000B
	LD	(HL),A
	INC	HL
	ADD	HL,DE
	ADD	HL,DE
	ADD	IX,DE
	ADD	IY,DE
	DJNZ	FADEIREDC
	OR	A
	RET
FADEIGREEN: 
	LD	HL,FADEMAAR
	LD	(FADEROUT),HL
	LD	HL,FADETABEL+4
	INC	IX
	INC	IY
	JR	FADEIBLGR
FADEIBLUE:
	LD	HL,FADEIGREEN
	LD	(FADEROUT),HL
	LD	HL,FADETABEL+2
FADEIBLGR:
	LD	DE,2
	LD	B,16
FADEIBLGRC:
	LD	A,(IY+0)
	OR	240
	SUB	(IX+0)
	OR	240
	BIT	3,A
	JR	NZ,FADEIBLGRB
	AND	15
FADEIBLGRB:
	LD	(HL),A
	INC	HL
	LD	A,(IX+0)
	AND	00000111B
	SLA	A
	SLA	A
	SLA	A
	LD	(HL),A
	INC	HL
	ADD	HL,DE
	ADD	HL,DE
	ADD	IX,DE
	ADD	IY,DE
	DJNZ	FADEIBLGRC
	OR	A
	RET
FADESPD1:	DB	0
FADESPD2:	DB	0
FADEAANT:	DB	0

FADE:	DB	0C3H	;Invoer: IX=startpallet
FADEROUT:	DW	0	;        IY=eindpallet
FADEMAAR:
	LD	HL,FADESPD1
	OR	A
	DEC	(HL)
	RET	NZ
	INC	HL
	LD	A,(HL)
	DEC	HL
	LD	(HL),A
	XOR	A
	OUT	(099H),A
	LD	A,144
	OUT	(099H),A
	LD	HL,FADETABEL
	LD	B,16
FADEMAARB:
	LD	A,(HL)
	INC	HL
	ADD	A,(HL)
	LD	(HL),A
	INC	HL
	SLA	A
	AND	01110000B
	LD	C,A
	LD	A,(HL)
	INC	HL
	ADD	A,(HL)
	LD	(HL),A
	INC	HL
	SRL	A
	SRL	A
	SRL	A
	OR	C
	OUT	(09AH),A
	LD	A,(HL)
	INC	HL
	ADD	A,(HL)
	LD	(HL),A
	INC	HL
	SRL	A
	SRL	A
	SRL	A
	OUT	(09AH),A
	DJNZ	FADEMAARB
	LD	HL,FADEAANT
	DEC	(HL)
	SCF
	RET	Z
	OR	A
	RET
FADETABEL:	DS	96
PALLETLEEG: DS	32	;Een pallet van allemaal zwarte kleuren
PALLETVOL:
	DB	077H,07H,077H,07H,077H,07H,077H,07H,077H,07H
	DB	077H,07H,077H,07H,077H,07H,077H,07H,077H,07H
	DB	077H,07H,077H,07H,077H,07H,077H,07H,077H,07H
	DB	077H,07H,077H,07H,077H,07H,077H,07H,077H,07H

PAUSE:
	EI
	HALT
	DJNZ	PAUSE
	RET

STANDINT:
	PUSH	AF
	LD	A,1
	OUT	(099H),A
	LD	A,143
	OUT	(099H),A
	IN	A,(099H)
	AND	1
	LD	A,2
	OUT	(099H),A
	LD	A,143
	OUT	(099H),A
	JR	Z,STANDINTB
	DI
	PUSH	HL
	PUSH	DE
	PUSH	BC
	EXX
	EX	AF,AF'
	PUSH	HL
	PUSH	DE
	PUSH	BC
	PUSH	AF
	PUSH	IX
	PUSH	IY
	DB	0CDH
INTERCALL:
	DW	0
	POP	IY
	POP	IX
	POP	AF
	POP	BC
	POP	DE
	POP	HL
	EXX
	EX	AF,AF'
	POP	BC
	POP	DE
	POP	HL
STANDINTB:
	POP	AF
	EI
	RET

NIETS:	RET

	;stelt FM of PSG geluidseffect in. HL=FMeffect DE=PSGeffect
	;(FC82)=0 als geen MSX MUSIC en 1 als wel MSX MUSIC aanwezig
EFFECTOR:
	LD	A,(0FC82H)
	OR	A
	JP	NZ,SETFMPEFF	;zet FM effect
	EX	DE,HL
	JP	SETPSGEFF	;zet PSG effect

	;stelt FM en PSG effect gelijktijdig in. HL=FMeffect, DE=PSGeffect
EFFECTAND:
	CALL	SETFMPEFF
	EX	DE,HL
	JP	SETPSGEFF

	;Stelt FM en PSG effect in of alleen (een ander) PSG effect.
	;HL=FMeffect, BC=PSGeffect, DE=losstaand PSG effect.
EFFECTOR2:
	LD	A,(0FC82H)
	OR	A
	JR	Z,EFFECTOR2B
	CALL	SETFMPEFF
	LD	D,B
	LD	E,C
EFFECTOR2B:
	EX	DE,HL
	JP	SETPSGEFF

	;Alleen muziek in interrupt
INTMUSIC:
	CALL	EFFPSGBEG	;speel PSG effect
	CALL	EFFFMPBEG	;speel FM effect
	JP	REPLAYROUT	;speel muziek

VOLUMESSS:	DW	00F0FH	;volume van PSG en FM

	;Startcoordinaten witte scroll: H=x, L=y
WITBEGCOR:
	LD	A,H
	LD	(LETTERCOMM+4),A
	LD	A,L
	LD	(LETTERCOMM+6),A
	RET
	;Zet letter neer: a=letter, automatisch 1 positie verder
WITPUTLET:
	SUB	32
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	(LETTERCOMM),A
	LD	A,191
	JR	NC,WITPUTLETB
	ADD	A,8
WITPUTLETB:
	LD	(LETTERCOMM+2),A
	LD	HL,LETTERCOMM
	CALL	VDPCOMM
	LD	A,(LETTERCOMM+4)
	ADD	A,8
	LD	(LETTERCOMM+4),A
	RET
	;Kleine menu-letters neerzetten
LETTERCOMM:
	DW	0            ;Van (X)
	DB	191 ,2       ;Van (Y)
	DW	0            ;Naar (X)
	DB	0  ,0        ;Naar (Y)
	DW	8            ;Aantal horizontaal
	DW	8            ;Aantal verticaal
	DB	000H         ;Kleur
	DB	00000000B    ;Manier van copieren
	DB	11010000B    ;Commando/Logop

LINE:
	LD	C,12           ;Line (H,L)-(D,E)
	LD	A,L            ;
	LD	(LINEG+2),A    ;Invoer : LINEG+8 : kleur
	SUB	E              ;         LINEG+10: Commando/LogOp
	JR	NC,LINEB
	NEG                   ;Opm.: Alleen aanroepen als
	RES	3,C            ;      STATUS-register 2 gezet is
LINEB:
	LD	B,A
	LD	A,H
	LD	(LINEG),A
	SUB	D
	JR	NC,LINEC
	NEG
	RES	2,C
LINEC:
	SUB	B
	JR	NC,LINED
	SET	0,C
	ADD	A,B
	LD	(LINEG+6),A
	LD	A,B
	LD	(LINEG+4),A
	LD	A,C
	LD	(LINEG+9),A
	JR	LINEE
LINED:
	ADD	A,B
	LD	(LINEG+4),A
	LD	A,B
	LD	(LINEG+6),A
	LD	A,C
	LD	(LINEG+9),A
LINEE:
	LD	A,36
	OUT	(099H),A
	LD	A,145
	OUT	(099H),A
	LD	HL,LINEG
	LD	C,09BH
LINEF:
	IN	A,(099H)
	AND	1
	JR	NZ,LINEF
	OUTI
	OUTI
	OUTI
	OUTI
	OUTI
	OUTI
	OUTI
	OUTI
	OUTI
	OUTI
	OUTI
	RET
LINEG:
	DB	0,0,0,0,0,0,0,0,15,0,01110000B

	;Leest stand van cursors, beide joysticks, SPACE, SHIFT en GRAPH
	;vuurknoppen (ook SPACE,SHIFT,GRAPH) alleen bij indrukken aktief.
	;Invoer: (JOYWELKE)=143 voor JOYST1 en 207 voor JOYST2
	;uitvoer:A &(JOYFIRENU):bit 7    6    5    4    3    2   1    0
	;		     0    0    TrB  TrA  GRP  0   SHFT SPC

	;	D en (JOYRICHT): bit 7    6    5    4    3    2    1    0
	;		     0    0    0    0    R    L    D    U

JOYSTICK2:
	NOP
JOYSTICK:
	IN	A,(0AAH)
	AND	0F0H
	LD	B,A
	OR	8
	OUT	(0AAH),A
	NOP
	IN	A,(0A9H)
	XOR	255
	AND	11110001B
	LD	D,A
	LD	A,B
	OR	6
	OUT	(0AAH),A
	NOP
	IN	A,(0A9H)
	XOR	255
	SLA	A
	OR	D
	AND	00001011B
	LD	C,A
	SRL	D
	SRL	D
	SRL	D
	SRL	D
	LD	A,D
	AND	8
	RES	3,D
	SRL	D
	JR	NC,JOYSTICK2B
	OR	4
JOYSTICK2B:
	OR	D
	LD	D,A
	LD	A,15
	OUT	(0A0H),A
	LD	A,(JOYWELKE)
	OUT	(0A1H),A
	LD	A,14
	OUT	(0A0H),A
	NOP
	IN	A,(0A2H)
	XOR	255
	OR	D
	LD	E,A
	AND	15
	LD	D,A
	LD	(JOYRICHT),A
	LD	A,E
	AND	00110000B
	OR	C
	LD	BC,(JOYFIREBUF)
	XOR	255
	LD	(JOYFIREBUF),A
	XOR	255
	AND	C
	LD	(JOYFIRENU),A
	RET
JOYFIREBUF: DB	255
JOYFIRENU:	DB	0
JOYRICHT:	DB	0
JOYWELKE:	DB	143	;143 voor joystick 1, 207 voor joystick 2

PSGEFF1:
	DB	254,7,184,8,14,255,1,4,0,1,1,1,250,15,240,0,15,0,15,253,248,1,65,253,248,1,0BFH,249,252,254,8,0,251
PSGEFF2:
	DB	254,7,184,1,0,255,15,1,1,1,8,15,254,0,40,253,253,253,254,0,42,253,253,253,252,254,8,0,251
PSGEFF3:
	DB	254,7,184,8,15,1,1,255,240,40,1,20,0,240,253,252,254,8,0,251
PSGEFF4:
	DB	254,7,184,8,15,255,15,4,1,1,8,15,254,1,7,0,60,253,253,253,254,1,12,253,253,253,254,8,0,252,251
PSGEFF5:
	DB	254,7,184,1,6,0,50,8,15,255,54,0,1,9,0,54,253,252,254,8,0,251
PSGEFF6:
	DB	254,7,184,8,15,255,15,6,1,3,8,15,254,1,3,0,60,253,253,253,253,254,1,4,253,253,253,253,254,8,0,252,251
PSGEFF7:
	DB	254,7,184,8,13,1,0,255,240,0,1,60,0,240,253,252,254,8,0,251
PSGEFF8:
	DB	254,0,100,1,0,8,15,7,184,255,15,3,1,1,8,15,248,0,0BCH,250,1,3,0,1,14,1
	DB	253,253,248,0,0B6H,253,253,248,0,74,253,253,249,252,254,8,0,251
PSGEFF9:
	DB	254,7,184,8,15,1,0,255,0,240,0,40,0,0,248,1,69,253,248,1,0BDH,252,254,8,0,251
PSGEFF10:
	DB	254,7,184,8,13,1,0,0,65,253,253,254,0,60,253,253,254,0,35,253,253,254,8,0,251
PSGEFF11:
	DB	254,7,184,8,13,255,200,0,1,10,0,200,254,1,1,248,0,114,253,248,0,08EH,254,1,1,253,252,254,8,0,251
PSGEFF12:
	DB	254,7,184,8,14,1,0,0,70,253,254,0,62,253,254,0,56,253,254,8,0,253,251
PSGEFF13:
	DB	254,7,184,8,15,255,15,5,1,1,8,15,254,1,10,0,55,253,253,254,0,60,253,254,8,0,253,252,251
PSGEFF14:
	DB	254,7,184,8,15,255,2,5,0,1,1,2,250,0,240,0,20,0,0,253,248,1,65,249,252,254,8,0,251
PSGEFF15:
	DB	254,7,184,0,0,1,0,255,15,6,1,1,8,15,254,0,0,1,1,253,254,0,150,253
	DB	254,0,100,1,2,253,254,1,3,253,254,1,5,253,252,254,0,0,1,0,251
PSGEFF16:
	DB	254,7,176,1,0,0,20,6,24,255,12,15,0,1,8,12,253,248,6,0BDH,248,0,66,253
	DB	252,250,15,9,1,1,8,15,248,6,0BDH,248,0,66,253,249,254,7,184,0,0,1,0,251
PSGEFF17:
	DB	254,7,184,0,0,1,6,255,15,7,1,2,8,15,253,250,0,6,0,1,14,0,248,1,65,253
	DB	248,8,0BFH,253,249,248,1,0B9H,253,252,254,8,0,251
PSGEFF18:
	DB	254,1,0,0,30,7,176,6,30,255,15,5,1,1,8,15,248,6,0BDH,253
	DB	248,0,74,253,252,254,7,184,1,0,0,0,251
PSGEFF19:
	DB	254,1,0,7,176,8,15,255,7,13,0,2,8,7,254,1,1,0,0,6,31,253
	DB	254,0,100,6,29,253,254,0,200,6,27,253,254,1,2,0,100,6,25,253
	DB	254,1,200,6,22,253,254,1,3,6,20,253,254,1,4,6,18,253,254,1,6,6,15,253
	DB	254,1,8,6,12,253,254,1,11,6,9,253,254,1,13,6,5,253,254,1,15,6,0,253,252
PSGEFF20:
	DB	254,7,176,8,15,253,250,15,1,1,2,8,15,254,1,1,0,0,6,31,253
	DB	254,1,1,0,100,6,29,253,254,1,1,0,200,6,27,253,254,1,2,0,100,6,25,253
	DB	254,1,2,1,150,6,22,253,254,1,2,1,200,6,22,253,254,1,3,6,20,253
	DB	254,1,4,6,18,253,254,1,5,6,17,253,254,1,6,6,15,253,254,1,8,6,12,253
	DB	254,1,11,6,9,253,254,1,13,6,5,253,254,1,15,6,0,253,249,254,0,0,1,0,7,184,251
PSGEFF21:
	DB	254,8,15,7,176,253,254,6,3,1,2,255,40,0,1,2,0,40,253,252,254,8,0,251
PSGEFF22:
	DB	254,8,15,7,176,253,254,6,3,1,2,255,0,40,0,2,0,0,253,252,254,8,0,251
PSGEFF23:
	DB	254,8,15,7,176,1,0,6,0,255,32,47,0,1,0,32,253,248,6,0BFH,253
	DB	248,8,0BFH,253,253,253,253,253,253,253,252,254,8,0,7,184,251
PSGEFF24:
	DB	254,7,176,8,15,1,0,253,254,0,100,6,16, 255,15,0,1,1,8,15
	DB	253,254,0,253,253,253,254,0,200,248,6,80,253,252,254,7,184,251
PSGEFF25:
	DB	254,7,184,8,15,255,1,15,0,1,1,1,253,252,248,8,0BEH,255,4,15,0,1,1,1, 253, 252, 248,8,0BEH
	DB	255,7,15,0,1,1,1,253,252,248,8,0BEH,255,9,15,0,1,1,1, 253, 252, 248,8,0BEH
	DB	255,10,15,0,1,1,1,253,252,248,8,0BEH,255,11,15,0,1,1,1,253,252,248,8,0BEH
	DB	255,12,15,0,1,1,1,253,252,248,8,0BEH,255,13,15,0,1,1,1,253,252,248,8,0BFH,251
PSGEFF26:
	DB	254,7,184,8,15,0,100,1,1,255,1,6,0,1,20,1,253,248,1,68,253
	DB	248,1,0BDH,248,8,0BFH,252,254,8,0,251
PSGEFF27:
	DB	254,7,176,8,15,6,15,253,254,0,18,1,0,255,15,7,1,1,8,15
	DB	253,248,6,0BFH,253,248,0,0BFH,253,253,252,254,7,184,8,0,251
PSGEFF28:
	DB	254,7,184,1,1,0,0,253,255,15,0,1,1,8,15,248,0,79,253,252,251
PSGEFF29:
	DB	254,7,176,8,12,6,0,253,254,0,247,1,0,255,0,30,0,2,6,0
	DB	253,250,14,11,1,1,8,14,253,249, 250,12,15,0,1,8,12,253,249
	DB	248,0,0BBH,252,253,254,8,0,7,184,251
PSGEFF30:
	DB	254,7,176,8,15,6,31,253,254,0,0,1,1,255,15,0,1,1,8,15
	DB	254,0,75,253,254,0,150,253,254,0,247,253,254,0,150
	DB	253,254,0,75,253,254,0,0,248,6,0BEH,253,252,254,7,176,251
PSGEFF31:
	DB	254,7,177,8,15,6,8,253,254,8,0,1,0,0,20,7,184,253,254,8,9
	DB	253,254,7,177,8,13,253,254,8,0,7,184,251
PSGEFF32:
	DB	254,7,177,8,15,6,11,253,254,8,0,1,0,0,20,7,184,253,254,8,10
	DB	253,254,7,177,8,13,253,254,8,0,7,184,251
PSGEFF33:
	DB	254,7,184,8,15,1,1,0,200,253,254,1,2,253,254,8,0,251
PSGEFF34:
	DB	254,7,176,6,0,253,254,8,15,1,2,0,100,253,253,253
	DB	253,253,253,253,253,253,253,253,253,253,253,253,253
	DB	255,15,10,1,1,8,15,253,253,253,252,254,8,0,7,184,251
PSGEFF35:
	DB	254,7,184,1,2,0,0,255,1,4,0,1,20,1,253,254,8,14,253,254,8,11
	DB	253,254,8,0,253,253,253,253,253,252,251
PSGEFF36:
	DB	254,7,184,8,15,1,1,0,0,253,254,0,200,253,254,8,0,251
PSGEFF37:
	DB	254,7,177,8,13,6,8,253,254,8,0,1,0,0,20,7,184,253,254,8,8
	DB	253,254,7,177,8,11,253,254,8,0,7,184,251
PSGEFF38:
	DB	254,7,176,1,0,0,30,6,8 ,255,12,15,0,1,8,12,253,248,0BAH,0,248,0,0BEH,253
	DB	252,250,15,9,1,1,8,15,248,6,67,248,0,0BEH,253,249,254,7,184,0,0,1,0,251
PSGEFF39:
	DB	254,0,50,1,0,7,184,255,15,11,1,1,8,15,253,253,252,255,11,1,1,1,8,11
	DB	254,0,49,253,253,253,253,254,0,50,253,253,253,252,254,8,0,251
PSGEFF40:
	DB	254,0,128,1,5,12,0,253,254,11,6,8,16,13,8,255,0,25,0,1,20,0
	DB	253,252,254,8,0,251
PSGEFF41:
	DB	254,7,177,6,25,255,13,11,1,1,8,13,253,248,6,184,253,252
	DB	255,10,5,1,1,8,10,253,253,253,252,254,8,0,7,184,251 ;+FM7

FMEFF1:
	DB	254,030H,030H,010H,120,020H,0,253,254,020H,28,255,030H,035H
	DB	0,1,030H,030H,253,253,252,254,030H,0C0H,010H,98,020H,0,253
	DB	254,020H,28,255,0C0H,0C8H,0,1,030H,0C0H,253,253,252
	DB	254,010H,0,251
FMEFF2:
	DB	254,030H,020H,020H,0,020H,30,255,100,0,1,5,010H,100,253,252,251
FMEFF3:
	DB	254,030H,050H,010H,0,020H,0,253,254,020H,26,253,254,030H
	DB	040H,255,70,5,1,5,010H,70,253,252,255,20,0,1,1,010H,20,253
	DB	252,253,254,030H,15,251
FMEFF4:
	DB	254,030H,0C0H,010H,0,020H,0,253,254,020H,26,255,1,120,0,1
	DB	03AH,1,253,248,010H,214,252,253,254,010H,0,020H,18,251
FMEFF5:
	DB	254,030H,060H,010H,0,020H,0,253,254,020H,22,255,0,120,0,20
	DB	010H,0,253,248,010H,0,253,252,254,010H,0,251
FMEFF6:
	DB	254,030H,050H,010H,0,253,254,020H,0,020H,30,253,253,254,030H
	DB	040H,253,255,120,0,1,15,010H,120,253,248,010H,192,253,252
	DB	254,010H,0,030H,15,251
FMEFF7:
	DB	254,030H,058H,010H,0,253,254,020H,0,020H,26,253,253,254,030H
	DB	040H,253,255,150,20,1,10,010H,150,253,252,254,010H,0,030H,04FH,251
FMEFF8:
	DB	254,030H,0C0H,010H,60,253,255,1,4,0,1,03BH,1,250,1,4,0,1,03AH
	DB	1,253,248,010H,74,254,020H,0,020H,30,249,253,248,010H
	DB	152,252,253,254,010H,0,251
FMEFF9:
	DB	254,030H,030H,253,255,25,4,1,3,010H,25,253,253,254,020H,0
	DB	020H,24,253,253,253,252,254,010H,0,251
FMEFF10:
	DB	254,030H,0B0H,253,255,31,4,1,3,010H,31,253
	DB	254,020H,0,020H,24,253,252,254,010H,0,251
FMEFF11:
	DB	254,030H,0F0H,010H,170,020H,0,253,254,020H,20,255,1,10,0,1
	DB	03AH,1,253,253,248,030H,70,253,253,253,248,030H,187,252
	DB	254,010H,0,251
FMEFF12:
	DB	254,030H,060H,020H,0,253,254,020H,24,255,30,10,1,1,010H,30
	DB	253,248,010H,74,253,252,254,010H,0,251
FMEFF13:
	DB	254,030H,010H,020H,0,020H,24,253,255,1,3,0,1,03AH,1
	DB	254,010H,200,253,254,010H,100,253,252,254,010H,0
	DB	255,1,4,0,1,03AH,1,253,252,255,1,10,0,1,03AH,1
	DB	254,010H,199,253,254,010H,98,253,252,254,010H,0,251

	;begin van de demo
STARTDEMO:
	DI
	LD	(STACK),SP

	CALL	RAMBYTE	;RAM op alle pagina's instellen
	LD	A,D
	OUT	(0A8H),A
	LD	A,E
	LD	(0FFFFH),A

	LD	HL,01800H	;muziek initialiseren
	LD	BC,06000H
	CALL	MUSADRES	;INIT MUSIC DATA
	LD	HL,01804H
	CALL	INITMUSDAT
	CALL	INITVDPS
	CALL	INSTMUSINT
	;instellingkies voor password input
	LD	HL,ONDERCOMM1
	CALL	VDPCOMM
	LD	HL,ONDERCOMM2
	CALL	VDPCOMM
	LD	A,3
	LD	(LINEG+3),A
	LD	HL,000E8H
	LD	DE,0BFE8H
	CALL	LINE
	LD	HL,0BFE8H
	LD	DE,0BFFBH
	CALL	LINE
	LD	HL,0BFFBH
	LD	DE,000FBH
	CALL	LINE
	LD	HL,000FBH
	LD	DE,000E8H
	CALL	LINE
	XOR	A
	LD	(LINEG+3),A
	CALL	CHECKVDP
RESTART:
	CALL	INITVDPS
	CALL	INSTMUSINT
	CALL	AMAZING

	JR	RESTART

QUITDEMO:
	DI
	CALL	ALLMUSICOFF	;muziek helemaal uit
	LD	SP,(STACK)
	LD	HL,CLRSCRCOMM	;scherm wissen (page 0)
	CALL	VDPCOMM2
	CALL	CHECKVDP2	;wachten tot VDP klaar is
	LD	BC,0000FH
	CALL	WRTVDP
	LD	BC,00600H
	CALL	WRTVDP
	LD	BC,06201H
	CALL	WRTVDP
	CALL	RAMROMBYTE	;RAM op page 2 en 3, ROM op page 0 en 1
	LD	A,D
	OUT	(0A8H),A
	LD	A,E
	LD	(0FFFFH),A
	LD	HL,0	;achtergrond/borderkleur 0 maken
	LD	(0F3EAH),HL
	LD	A,5	;schermmode 5 als huidige instellen
	LD	(0FCAFH),A
	EI
	RET

ONDERCOMM1:
	DW	32           ;Van (X)
	DB	150 ,1       ;Van (Y)
	DW	0            ;Naar (X)
	DB	212,3        ;Naar (Y)
	DW	192          ;Aantal horizontaal
	DW	20           ;Aantal verticaal
	DB	000H         ;Kleur
	DB	00000000B    ;Manier van copieren
	DB	11010000B    ;Commando/Logop
ONDERCOMM2:
	DW	0            ;Van (X)
	DB	0,0          ;Van (Y)
	DW	0            ;Naar (X)
	DB	232,3        ;Naar (Y)
	DW	192          ;Aantal horizontaal
	DW	20           ;Aantal verticaal
	DB	000H         ;Kleur
	DB	00000000B    ;Manier van copieren
	DB	11000000B    ;Commando/Logop

	INCLUDE "amazing.asm"
	INCLUDE "bubble.asm"
	INCLUDE "titel.asm"
	
;----------------------------------------------------------------------------
; Fill with zero's to get binary file size divisible by 128 bytes
; That's what GEN80 used to do automatically
	
	DS (128-($%128))*($%128>0)*-1